mmat <- mat
class(mmat) <- "ftable"
attr(mmat, "row.vars") <- list(Gender=glevs, Race=rlevs)
attr(mmat, "col.vars") <- list(party=cn)
data <- as.data.frame(mmat)
data
head(data)
multinom(party ~ Gender + Race, weights=Freq, data=data)
mod <- multinom(party ~ Gender + Race, weights=Freq, data=data)
summary(mod)
fit0<-multinom(food~1,weights=y,data=dat) # from nnet package
summary(fit0)
setwd("~/Dropbox/Classes/Biostat 750_2012/Biostat_755_2013/Homework1/")
# install.packages("exactLoglinTest")
library(exactLoglinTest)
library(nnet)
alligator.dat<-read.table(file="Alligator_food_data.txt")
data(alligator.dat)
#get rid of the 0 cells
dat<-subset(alligator.dat, y != 0) # the model is unstable if you don't do this; typical in logistic regressions; we add a small number
dat$food<-as.factor(dat$food)
dat$gender<-as.factor(dat$gender)
dat$size<-as.factor(dat$size)
dat$lake<-as.factor(dat$lake)
######################################################################
#
#	food: 1 = Fish, 2 = invertebrate, 3 = reptile, 4 = bird, 5 = other
#	size: 1 = smaller than 2.3, 2 = larger than 2.3
#	gender: 1 = male, 2 = female
#	lake: 1 = Hancock, 2 = Oklawaha, 3 = Tafford, 4 = George
#								     #
######################################################################
fit0<-multinom(food~1,weights=y,data=dat) # from nnet package
summary(fit0)
fit1<-update(fit0,food~gender) # update and re-fit the model
dat <- flushout(data)
#check
ftab <- ftable(xtabs(~ Gender + Race + party, data=dat))
mlog.long <- multinom(party ~ Gender + Race, data=dat)
mlog.long
mod.rg
mat <- c(132, 179, 120, 42, 7, 12, 172, 123, 100, 56, 8, 15)
mat <- matrix(mat, nrow=4, ncol=3, byrow=TRUE)
cn <- c("Democrat", "Replublican", "Independent")
rn <- c("Male.White" ,"Male.Black", "Female.White" ,"Female.Black")
glevs <- c("Male", "Female")
rlevs <- c("White", "Black")
mmat <- mat
class(mmat) <- "ftable"
attr(mmat, "row.vars") <- list(Gender=glevs, Race=rlevs)
attr(mmat, "col.vars") <- list(party=cn)
data <- as.data.frame(mmat)
mod.null <- multinom(party ~ 1, weights=Freq, data=data)
mod.g <- multinom(party ~ Gender, weights=Freq, data=data)
mod.r <- multinom(party ~ Race, weights=Freq, data=data)
mod.rg <- multinom(party ~ Gender + Race, weights=Freq, data=data)
dat <- flushout(data)
#check
ftab <- ftable(xtabs(~ Gender + Race + party, data=dat))
mlog.long <- multinom(party ~ Gender + Race, data=dat)
mlog.long
mod.rg
all.equal(mod.rg, mod.long)
all.equal(mod.rg, mlog.long)
summary(mlog.long)
anova(mlog.long, mod.rg)
summary(mlog.long)
sl <- summary(mlog.rg)
smod <- summary(mod.rg)
slog <- summary(mlog.long)
all.equal(smod, slog)
smod[[13]]
slog[[13]]
names(slog)[13]
all.equal(smod, slog)
names(slog)[14]
names(slog)[16]
######################################################################
#
#  fitting multinomial models in R
#
######################################################################
setwd("~/Dropbox/Classes/Biostat 750_2012/Biostat_755_2013/Homework1/")
# install.packages("exactLoglinTest")
library(exactLoglinTest)
library(nnet)
alligator.dat<-read.table(file="Alligator_food_data.txt")
data(alligator.dat)
#get rid of the 0 cells
dat<-subset(alligator.dat, y != 0) # the model is unstable if you don't do this; typical in logistic regressions; we add a small number
dat$food<-as.factor(dat$food)
dat$gender<-as.factor(dat$gender)
dat$size<-as.factor(dat$size)
dat$lake<-as.factor(dat$lake)
######################################################################
#
#	food: 1 = Fish, 2 = invertebrate, 3 = reptile, 4 = bird, 5 = other
#	size: 1 = smaller than 2.3, 2 = larger than 2.3
#	gender: 1 = male, 2 = female
#	lake: 1 = Hancock, 2 = Oklawaha, 3 = Tafford, 4 = George
#								     #
######################################################################
fit0<-multinom(food~1,weights=y,data=dat) # from nnet package
summary(fit0)
#weights:  10 (4 variable)
#initial  value 352.466903
#final  value 302.181462
#converged
# Call:
#   multinom(formula = food ~ 1, data = dat, weights = y)
#
# Coefficients:
#   (Intercept)
# 2  -0.4324211
# 3  -1.5988558
# 4  -1.9783458
# 5  -1.0775589
#
# Std. Errors:
#   (Intercept)
# 2   0.1644133
# 3   0.2515350
# 4   0.2959078
# 5   0.2046663
#
# Residual Deviance: 604.3629
# AIC: 612.3629
#
# Correlation of Coefficients:
#   2:(Intercept) 3:(Intercept) 4:(Intercept)
# 3:(Intercept) 0.2572389
# 4:(Intercept) 0.2186647     0.1429280
# 5:(Intercept) 0.3161468     0.2066461     0.1756586
fit1<-update(fit0,food~gender) # update and re-fit the model
# weights:  15 (8 variable)
# initial  value 352.466903
# iter  10 value 301.286320
# final  value 301.129428
# converged
fit2<-update(fit0,food~size)
# weights:  15 (8 variable)
# initial  value 352.466903
# iter  10 value 294.689203
# final  value 294.606678
# converged
fit3<-update(fit0,food~lake)
# weights:  25 (16 variable)
# initial  value 352.466903
# iter  10 value 281.231414
# iter  20 value 280.583843
# iter  20 value 280.583843
# iter  20 value 280.583843
# final  value 280.583843
# converged
fit4<-update(fit0,food~lake+size)
# weights:  30 (20 variable)
# initial  value 352.466903
# iter  10 value 271.192328
# iter  20 value 270.040324
# final  value 270.040141
# converged
fit5<-update(fit0,food~lake+size+gender)
# weights:  35 (24 variable)
# initial  value 352.466903
# iter  10 value 272.615962
# iter  20 value 268.943719
# final  value 268.932740
# converged
anova(fit0,fit1,fit2,fit3,fit4,fit5)
# Model Resid. df Resid. Dev   Test    Df  LR stat.      Pr(Chi)
# 1                    1       220   604.3629           NA        NA           NA
# 2               gender       216   602.2589 1 vs 2     4  2.104069 0.7166248128
# 3                 size       216   589.2134 2 vs 3     0 13.045500 0.0000000000
# 4                 lake       208   561.1677 3 vs 4     8 28.045670 0.0004656422
# 5          lake + size       204   540.0803 4 vs 5     4 21.087405 0.0003042800
# 6 lake + size + gender       200   537.8655 5 vs 6     4  2.214802 0.6963203398
######################################################################
#
# fitting proportional odds model in R
#
######################################################################
mental_impairment.dat<-read.table(file="Mental_impairment_data.txt")
names(mental_impairment.dat)<-c("impairment","ses","events")
attach(mental_impairment.dat)
impairment<-as.ordered(impairment)
levels(impairment)<-c("well","mild","mod","imp")
ses<-as.factor(ses)
######################################################################
#Fit using the polr function in the MASS package		     #
#In simulations this was reported to be unstable		     #
######################################################################
library(MASS)
fit_polr<-polr(impairment~ses+events)
# Re-fitting to get Hessian
#
# Call:
#   polr(formula = impairment ~ ses + events)
#
# Coefficients:
#   Value Std. Error   t value
# ses1   -1.1112310  0.6108801 -1.819066
# events  0.3188613  0.1209932  2.635366
#
# Intercepts:
#   Value   Std. Error t value
# well|mild -0.2819  0.6423    -0.4389
# mild|mod   1.2128  0.6607     1.8357
# mod|imp    2.2094  0.7210     3.0644
#
# Residual Deviance: 99.0979
# AIC: 109.0979
######################################################################
#Fit using the lrm function in the Design package		     #
#In simulations this was reported to be more stable 		     #
######################################################################
library(rms)
fit_lrm=lrm(impairment~ses+events)
lrm(formula = impairment ~ ses + events)
# Frequencies of Responses
# well mild  mod  imp
# 12   12    7    9
#
# Obs  Max Deriv Model L.R.       d.f.          P          C        Dxy
# 40      8e-10       9.94          2     0.0069      0.705      0.409
# Gamma      Tau-a         R2      Brier
# 0.425       0.31      0.236      0.183
#
# Coef    S.E.   Wald Z P
# y>=mild  0.2819 0.6423  0.44  0.6607
# y>=mod  -1.2128 0.6607 -1.84  0.0664
# y>=imp  -2.2094 0.7210 -3.06  0.0022
# ses=1   -1.1112 0.6109 -1.82  0.0689
# events   0.3189 0.1210  2.64  0.0084
########################################################################
#
# fitting migration data with I,QI,S,QS
#
#########################################################################
count <- c(11607, 100, 366, 124,
87, 13677, 515, 302,
172, 225, 17819, 270,
63, 176, 286, 10192)
count.table <- matrix(count, 4, 4, byrow = T)
region <- c("NE", "MW", "S", "W")
row <- gl(4, 4, labels = region) # generate factor levels; number of levels, number of replications
col <- gl(4, 1, length = 16, labels = region) # generate factor levels
migration.table <- cbind(count, row, col)
row
col
count
data
count.table
independence <- glm(Freq ~ Gender + Race + Democrat, family = poisson, data=data)
independence <- glm(Freq ~ Gender + Race + party, family = poisson, data=data)
independence
summary(mlog.long)
mlog.long
summary(mlog.long)
source('~/.active-rstudio-document', echo=TRUE)
independence
independence <- glm(Freq ~ Gender + Race , family = poisson, data=data)
independence
mod
mod.rg
independence <- glm(Freq ~ Gender + Race + party , family = poisson, data=data)
independence
summary(indep)
indep <- glm(Freq ~ Gender + Race + party , family = poisson, data=data)
summary(indep)
mat <- c(28, 40, 29, 24, 4, 12, 5, 2,41, 44, 20, 20, 12, 7, 3, 1)
mat <- matrix(mat, nrow=4, ncol=4, byrow=TRUE)
cn <- c("Progressive", "No Change", "Partial", "Complete")
glevs <- c("Male", "Female")
tlevs <- c("Sequential", "Alternating")
mmat <- mat
class(mmat) <- "ftable"
attr(mmat, "row.vars") <- list(Gender=glevs, Therapy=tlevs)
attr(mmat, "col.vars") <- list(response=cn)
data <- as.data.frame(mmat)
mat
data
data$response <- factor(data$response, levels=cn, ordered=TRUE)
head(data)
data$response
######################################################################
#
#  fitting multinomial models in R
#
######################################################################
setwd("~/Dropbox/Classes/Biostat 750_2012/Biostat_755_2013/Homework1/")
# install.packages("exactLoglinTest")
library(exactLoglinTest)
library(nnet)
alligator.dat<-read.table(file="Alligator_food_data.txt")
data(alligator.dat)
#get rid of the 0 cells
dat<-subset(alligator.dat, y != 0) # the model is unstable if you don't do this; typical in logistic regressions; we add a small number
dat$food<-as.factor(dat$food)
dat$gender<-as.factor(dat$gender)
dat$size<-as.factor(dat$size)
dat$lake<-as.factor(dat$lake)
######################################################################
#
#	food: 1 = Fish, 2 = invertebrate, 3 = reptile, 4 = bird, 5 = other
#	size: 1 = smaller than 2.3, 2 = larger than 2.3
#	gender: 1 = male, 2 = female
#	lake: 1 = Hancock, 2 = Oklawaha, 3 = Tafford, 4 = George
#								     #
######################################################################
fit0<-multinom(food~1,weights=y,data=dat) # from nnet package
summary(fit0)
#weights:  10 (4 variable)
#initial  value 352.466903
#final  value 302.181462
#converged
# Call:
#   multinom(formula = food ~ 1, data = dat, weights = y)
#
# Coefficients:
#   (Intercept)
# 2  -0.4324211
# 3  -1.5988558
# 4  -1.9783458
# 5  -1.0775589
#
# Std. Errors:
#   (Intercept)
# 2   0.1644133
# 3   0.2515350
# 4   0.2959078
# 5   0.2046663
#
# Residual Deviance: 604.3629
# AIC: 612.3629
#
# Correlation of Coefficients:
#   2:(Intercept) 3:(Intercept) 4:(Intercept)
# 3:(Intercept) 0.2572389
# 4:(Intercept) 0.2186647     0.1429280
# 5:(Intercept) 0.3161468     0.2066461     0.1756586
fit1<-update(fit0,food~gender) # update and re-fit the model
# weights:  15 (8 variable)
# initial  value 352.466903
# iter  10 value 301.286320
# final  value 301.129428
# converged
fit2<-update(fit0,food~size)
# weights:  15 (8 variable)
# initial  value 352.466903
# iter  10 value 294.689203
# final  value 294.606678
# converged
fit3<-update(fit0,food~lake)
# weights:  25 (16 variable)
# initial  value 352.466903
# iter  10 value 281.231414
# iter  20 value 280.583843
# iter  20 value 280.583843
# iter  20 value 280.583843
# final  value 280.583843
# converged
fit4<-update(fit0,food~lake+size)
# weights:  30 (20 variable)
# initial  value 352.466903
# iter  10 value 271.192328
# iter  20 value 270.040324
# final  value 270.040141
# converged
fit5<-update(fit0,food~lake+size+gender)
# weights:  35 (24 variable)
# initial  value 352.466903
# iter  10 value 272.615962
# iter  20 value 268.943719
# final  value 268.932740
# converged
anova(fit0,fit1,fit2,fit3,fit4,fit5)
# Model Resid. df Resid. Dev   Test    Df  LR stat.      Pr(Chi)
# 1                    1       220   604.3629           NA        NA           NA
# 2               gender       216   602.2589 1 vs 2     4  2.104069 0.7166248128
# 3                 size       216   589.2134 2 vs 3     0 13.045500 0.0000000000
# 4                 lake       208   561.1677 3 vs 4     8 28.045670 0.0004656422
# 5          lake + size       204   540.0803 4 vs 5     4 21.087405 0.0003042800
# 6 lake + size + gender       200   537.8655 5 vs 6     4  2.214802 0.6963203398
######################################################################
#
# fitting proportional odds model in R
#
######################################################################
mental_impairment.dat<-read.table(file="Mental_impairment_data.txt")
names(mental_impairment.dat)<-c("impairment","ses","events")
attach(mental_impairment.dat)
impairment<-as.ordered(impairment)
levels(impairment)<-c("well","mild","mod","imp")
ses<-as.factor(ses)
######################################################################
#Fit using the polr function in the MASS package		     #
#In simulations this was reported to be unstable		     #
######################################################################
library(MASS)
fit_polr<-polr(impairment~ses+events)
# Re-fitting to get Hessian
#
# Call:
#   polr(formula = impairment ~ ses + events)
#
# Coefficients:
#   Value Std. Error   t value
# ses1   -1.1112310  0.6108801 -1.819066
# events  0.3188613  0.1209932  2.635366
#
# Intercepts:
#   Value   Std. Error t value
# well|mild -0.2819  0.6423    -0.4389
# mild|mod   1.2128  0.6607     1.8357
# mod|imp    2.2094  0.7210     3.0644
#
# Residual Deviance: 99.0979
# AIC: 109.0979
######################################################################
#Fit using the lrm function in the Design package		     #
#In simulations this was reported to be more stable 		     #
######################################################################
library(rms)
fit_lrm=lrm(impairment~ses+events)
lrm(formula = impairment ~ ses + events)
fit_lrm
impairment
ses
events
mental_impairment.dat<-read.table(file="Mental_impairment_data.txt")
names(mental_impairment.dat)<-c("impairment","ses","events")
mental_impairment.dat
head(data)
lrm.fit2 <- lrm(response~ Therapy + Gender, data=data, weights=Freq)
lrm.fit <- lrm(response~ Therapy + Gender, data=dat)
mat <- c(28, 40, 29, 24, 4, 12, 5, 2,41, 44, 20, 20, 12, 7, 3, 1)
mat <- matrix(mat, nrow=4, ncol=4, byrow=TRUE)
cn <- c("Progressive", "No Change", "Partial", "Complete")
glevs <- c("Male", "Female")
tlevs <- c("Sequential", "Alternating")
mmat <- mat
class(mmat) <- "ftable"
attr(mmat, "row.vars") <- list(Gender=glevs, Therapy=tlevs)
attr(mmat, "col.vars") <- list(response=cn)
data <- as.data.frame(mmat)
data$response <- factor(data$response, levels=cn, ordered=TRUE)
dat <- flushout(data)
lrm.fit <- lrm(response~ Therapy + Gender, data=dat)
lrm.fit2 <- lrm(response~ Therapy + Gender, data=data, weights=Freq)
lrm.fit
lrm.int <- lrm(response~ Therapy * Gender, data=dat)
lrm.fit
lrm.int
anova(lrm.fit, lrm.int)
lrm.fit <- lrm(response~ Therapy + Gender, data=dat)
lrm.int <- lrm(response~ Therapy * Gender, data=dat)
anova(lrm.fit, lrm.int)
lrm.int
library(slidify)
setwd("~/Dropbox/Computing_Club/Install_and_Setup/")
author("Setup_2013")
slide <- function(fname) {
require(slidify)
require(knitr)
slidify(fname)
fname <- gsub(".Rmd", ".html", fname)
system(sprintf('open %s', fname))
}
slide("index.Rmd")
slide("index.Rmd")
slide("index.Rmd")
slide("index.Rmd")
slide("index.Rmd")
slide("index.Rmd")
slide("index.Rmd")
slide("index.Rmd")
slide("index.Rmd")
slide("index.Rmd")
slide("index.Rmd")
slide("index.Rmd")
slide("index.Rmd")
slide("index.Rmd")
slide("index.Rmd")
slide("index.Rmd")
slide("index.Rmd")
slide("index.Rmd")
slide("index.Rmd")
slide("index.Rmd")
slide("index.Rmd")
slide("index.Rmd")
slide("index.Rmd")
slide("index.Rmd")
slide("index.Rmd")
slide("index.Rmd")
slide("index.Rmd")
slide("index.Rmd")
slide("index.Rmd")
slide("index.Rmd")
slide("index.Rmd")
slide("index.Rmd")
slide("index.Rmd")
slide("index.Rmd")
slide("index.Rmd")
slide("index.Rmd")
slide("index.Rmd")
slide("index.Rmd")
slide("index.Rmd")
slide("index.Rmd")
slide("index.Rmd")
slide("index.Rmd")
slide("index.Rmd")
slide("index.Rmd")
